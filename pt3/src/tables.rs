pub(crate) const TONE_CHANNELS: usize = 3;
pub(crate) const DECIMATE_FACTOR: u32 = 8;
pub(crate) const FIR_SIZE: usize = 192;
pub(crate) const DC_FILTER_SIZE: usize = 1024;

pub(crate) const AY_DAC_TABLE: [f64; 32] = [
    0.0,
    0.0,
    0.00999465934234,
    0.00999465934234,
    0.0144502937362,
    0.0144502937362,
    0.0210574502174,
    0.0210574502174,
    0.0307011520562,
    0.0307011520562,
    0.0455481803616,
    0.0455481803616,
    0.0644998855573,
    0.0644998855573,
    0.107362478065,
    0.107362478065,
    0.126588845655,
    0.126588845655,
    0.20498970016,
    0.20498970016,
    0.292210269322,
    0.292210269322,
    0.372838941024,
    0.372838941024,
    0.492530708782,
    0.492530708782,
    0.635324635691,
    0.635324635691,
    0.805584802014,
    0.805584802014,
    1.0,
    1.0,
];

pub(crate) const YM_DAC_TABLE: [f64; 32] = [
    0.0,
    0.0,
    0.00465400167849,
    0.00772106507973,
    0.0109559777218,
    0.0139620050355,
    0.0169985503929,
    0.0200198367285,
    0.024368657969,
    0.029694056611,
    0.0350652323186,
    0.0403906309606,
    0.0485389486534,
    0.0583352407111,
    0.0680552376593,
    0.0777752346075,
    0.0925154497597,
    0.111085679408,
    0.129747463188,
    0.148485542077,
    0.17666895552,
    0.211551079576,
    0.246387426566,
    0.281101701381,
    0.333730067903,
    0.400427252613,
    0.467383840696,
    0.53443198291,
    0.635172045472,
    0.75800717174,
    0.879926756695,
    1.0,
];

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Envelope {
    SlideDown,
    HoldBottom,
    SlideUp,
    HoldTop,
}

pub(crate) const ENVELOPES: [[Envelope; 2]; 16] = [
    [Envelope::SlideDown, Envelope::HoldBottom],
    [Envelope::SlideDown, Envelope::HoldBottom],
    [Envelope::SlideDown, Envelope::HoldBottom],
    [Envelope::SlideDown, Envelope::HoldBottom],
    [Envelope::SlideUp, Envelope::HoldBottom],
    [Envelope::SlideUp, Envelope::HoldBottom],
    [Envelope::SlideUp, Envelope::HoldBottom],
    [Envelope::SlideUp, Envelope::HoldBottom],
    [Envelope::SlideDown, Envelope::SlideDown],
    [Envelope::SlideDown, Envelope::HoldBottom],
    [Envelope::SlideDown, Envelope::SlideUp],
    [Envelope::SlideDown, Envelope::HoldTop],
    [Envelope::SlideUp, Envelope::SlideUp],
    [Envelope::SlideUp, Envelope::HoldTop],
    [Envelope::SlideUp, Envelope::SlideDown],
    [Envelope::SlideUp, Envelope::HoldBottom],
];

pub(crate) fn decimate(x: &mut [f64]) -> f64 {
    let y = -0.0000046183113992051936 * (x[1] + x[191])
        + -0.00001117761640887225 * (x[2] + x[190])
        + -0.000018610264502005432 * (x[3] + x[189])
        + -0.000025134586135631012 * (x[4] + x[188])
        + -0.000028494281690666197 * (x[5] + x[187])
        + -0.000026396828793275159 * (x[6] + x[186])
        + -0.000017094212558802156 * (x[7] + x[185])
        + 0.000023798193576966866 * (x[9] + x[183])
        + 0.000051281160242202183 * (x[10] + x[182])
        + 0.00007762197826243427 * (x[11] + x[181])
        + 0.000096759426664120416 * (x[12] + x[180])
        + 0.00010240229300393402 * (x[13] + x[179])
        + 0.000089344614218077106 * (x[14] + x[178])
        + 0.000054875700118949183 * (x[15] + x[177])
        + -0.000069839082210680165 * (x[17] + x[175])
        + -0.0001447966132360757 * (x[18] + x[174])
        + -0.00021158452917708308 * (x[19] + x[173])
        + -0.00025535069106550544 * (x[20] + x[172])
        + -0.00026228714374322104 * (x[21] + x[171])
        + -0.00022258805927027799 * (x[22] + x[170])
        + -0.00013323230495695704 * (x[23] + x[169])
        + 0.00016182578767055206 * (x[25] + x[167])
        + 0.00032846175385096581 * (x[26] + x[166])
        + 0.00047045611576184863 * (x[27] + x[165])
        + 0.00055713851457530944 * (x[28] + x[164])
        + 0.00056212565121518726 * (x[29] + x[163])
        + 0.00046901918553962478 * (x[30] + x[162])
        + 0.00027624866838952986 * (x[31] + x[161])
        + -0.00032564179486838622 * (x[33] + x[159])
        + -0.00065182310286710388 * (x[34] + x[158])
        + -0.00092127787309319298 * (x[35] + x[157])
        + -0.0010772534348943575 * (x[36] + x[156])
        + -0.0010737727700273478 * (x[37] + x[155])
        + -0.00088556645390392634 * (x[38] + x[154])
        + -0.00051581896090765534 * (x[39] + x[153])
        + 0.00059548767193795277 * (x[41] + x[151])
        + 0.0011803558710661009 * (x[42] + x[150])
        + 0.0016527320270369871 * (x[43] + x[149])
        + 0.0019152679330965555 * (x[44] + x[148])
        + 0.0018927324805381538 * (x[45] + x[147])
        + 0.0015481870327877937 * (x[46] + x[146])
        + 0.00089470695834941306 * (x[47] + x[145])
        + -0.0010178225878206125 * (x[49] + x[143])
        + -0.0020037400552054292 * (x[50] + x[142])
        + -0.0027874356824117317 * (x[51] + x[141])
        + -0.003210329988021943 * (x[52] + x[140])
        + -0.0031540624117984395 * (x[53] + x[139])
        + -0.0025657163651900345 * (x[54] + x[138])
        + -0.0014750752642111449 * (x[55] + x[137])
        + 0.0016624165446378462 * (x[57] + x[135])
        + 0.0032591192839069179 * (x[58] + x[134])
        + 0.0045165685815867747 * (x[59] + x[133])
        + 0.0051838984346123896 * (x[60] + x[132])
        + 0.0050774264697459933 * (x[61] + x[131])
        + 0.0041192521414141585 * (x[62] + x[130])
        + 0.0023628575417966491 * (x[63] + x[129])
        + -0.0026543507866759182 * (x[65] + x[127])
        + -0.0051990251084333425 * (x[66] + x[126])
        + -0.0072020238234656924 * (x[67] + x[125])
        + -0.0082672928192007358 * (x[68] + x[124])
        + -0.0081033739572956287 * (x[69] + x[123])
        + -0.006583111539570221 * (x[70] + x[122])
        + -0.0037839040415292386 * (x[71] + x[121])
        + 0.0042781252851152507 * (x[73] + x[119])
        + 0.0084176358598320178 * (x[74] + x[118])
        + 0.01172566057463055 * (x[75] + x[117])
        + 0.013550476647788672 * (x[76] + x[116])
        + 0.013388189369997496 * (x[77] + x[115])
        + 0.010979501242341259 * (x[78] + x[114])
        + 0.006381274941685413 * (x[79] + x[113])
        + -0.007421229604153888 * (x[81] + x[111])
        + -0.01486456304340213 * (x[82] + x[110])
        + -0.021143584622178104 * (x[83] + x[109])
        + -0.02504275058758609 * (x[84] + x[108])
        + -0.025473530942547201 * (x[85] + x[107])
        + -0.021627310017882196 * (x[86] + x[106])
        + -0.013104323383225543 * (x[87] + x[105])
        + 0.017065133989980476 * (x[89] + x[103])
        + 0.036978919264451952 * (x[90] + x[102])
        + 0.05823318062093958 * (x[91] + x[101])
        + 0.079072012081405949 * (x[92] + x[100])
        + 0.097675998716952317 * (x[93] + x[99])
        + 0.11236045936950932 * (x[94] + x[98])
        + 0.12176343577287731 * (x[95] + x[97])
        + 0.125 * x[96];

    // copy first [DECIMATE_FACTOR] values to the end
    for i in 0..DECIMATE_FACTOR as usize {
        let v = x[i];
        x[x.len() - i - 1] = v;
    }
    y
}

const PT3_VOLUME_TABLE_33_34: [[u8; 16]; 16] = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2],
    [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
    [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4],
    [0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5],
    [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6],
    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
    [0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8],
    [0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9],
    [0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10],
    [0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11],
    [0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 11, 11, 12],
    [0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13],
    [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
];

const PT3_VOLUME_TABLE_35: [[u8; 16]; 16] = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
    [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3],
    [0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4],
    [0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5],
    [0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6],
    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],
    [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8],
    [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9],
    [0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10],
    [0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11],
    [0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12],
    [0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13],
    [0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
];

/// Table #0 of Pro Tracker 3.3x - 3.4r
const PT3_NOTE_TABLE_PT_33_34R: [u16; 96] = [
    0xc21, 0xb73, 0xace, 0xa33, 0x9a0, 0x916, 0x893, 0x818, 0x7a4, 0x736, 0x6ce, 0x66d, 0x610,
    0x5b9, 0x567, 0x519, 0x4d0, 0x48b, 0x449, 0x40c, 0x3d2, 0x39b, 0x367, 0x336, 0x308, 0x2dc,
    0x2b3, 0x28c, 0x268, 0x245, 0x224, 0x206, 0x1e9, 0x1cd, 0x1b3, 0x19b, 0x184, 0x16e, 0x159,
    0x146, 0x134, 0x122, 0x112, 0x103, 0x0f4, 0x0e6, 0x0d9, 0x0cd, 0x0c2, 0x0b7, 0x0ac, 0x0a3,
    0x09a, 0x091, 0x089, 0x081, 0x07a, 0x073, 0x06c, 0x066, 0x061, 0x05b, 0x056, 0x051, 0x04d,
    0x048, 0x044, 0x040, 0x03d, 0x039, 0x036, 0x033, 0x030, 0x02d, 0x02b, 0x028, 0x026, 0x024,
    0x022, 0x020, 0x01e, 0x01c, 0x01b, 0x019, 0x018, 0x016, 0x015, 0x014, 0x013, 0x012, 0x011,
    0x010, 0x00f, 0x00e, 0x00d, 0x00c,
];

/// Table #0 of Pro Tracker 3.4x - 3.5x
const PT3_NOTE_TABLE_PT_34_35: [u16; 96] = [
    0xc22, 0xb73, 0xacf, 0xa33, 0x9a1, 0x917, 0x894, 0x819, 0x7a4, 0x737, 0x6cf, 0x66d, 0x611,
    0x5ba, 0x567, 0x51a, 0x4d0, 0x48b, 0x44a, 0x40c, 0x3d2, 0x39b, 0x367, 0x337, 0x308, 0x2dd,
    0x2b4, 0x28d, 0x268, 0x246, 0x225, 0x206, 0x1e9, 0x1ce, 0x1b4, 0x19b, 0x184, 0x16e, 0x15a,
    0x146, 0x134, 0x123, 0x112, 0x103, 0x0f5, 0x0e7, 0x0da, 0x0ce, 0x0c2, 0x0b7, 0x0ad, 0x0a3,
    0x09a, 0x091, 0x089, 0x082, 0x07a, 0x073, 0x06d, 0x067, 0x061, 0x05c, 0x056, 0x052, 0x04d,
    0x049, 0x045, 0x041, 0x03d, 0x03a, 0x036, 0x033, 0x031, 0x02e, 0x02b, 0x029, 0x027, 0x024,
    0x022, 0x020, 0x01f, 0x01d, 0x01b, 0x01a, 0x018, 0x017, 0x016, 0x014, 0x013, 0x012, 0x011,
    0x010, 0x00f, 0x00e, 0x00d, 0x00c,
];

/// Table #1 of Pro Tracker 3.3x - 3.5x
const PT3_NOTE_TABLE_ST: [u16; 96] = [
    0xef8, 0xe10, 0xd60, 0xc80, 0xbd8, 0xb28, 0xa88, 0x9f0, 0x960, 0x8e0, 0x858, 0x7e0, 0x77c,
    0x708, 0x6b0, 0x640, 0x5ec, 0x594, 0x544, 0x4f8, 0x4b0, 0x470, 0x42c, 0x3fd, 0x3be, 0x384,
    0x358, 0x320, 0x2f6, 0x2ca, 0x2a2, 0x27c, 0x258, 0x238, 0x216, 0x1f8, 0x1df, 0x1c2, 0x1ac,
    0x190, 0x17b, 0x165, 0x151, 0x13e, 0x12c, 0x11c, 0x10a, 0x0fc, 0x0ef, 0x0e1, 0x0d6, 0x0c8,
    0x0bd, 0x0b2, 0x0a8, 0x09f, 0x096, 0x08e, 0x085, 0x07e, 0x077, 0x070, 0x06b, 0x064, 0x05e,
    0x059, 0x054, 0x04f, 0x04b, 0x047, 0x042, 0x03f, 0x03b, 0x038, 0x035, 0x032, 0x02f, 0x02c,
    0x02a, 0x027, 0x025, 0x023, 0x021, 0x01f, 0x01d, 0x01c, 0x01a, 0x019, 0x017, 0x016, 0x015,
    0x013, 0x012, 0x011, 0x010, 0x00f,
];

/// Table #2 of Pro Tracker 3.4r
const PT3_NOTE_TABLE_ASM_34R: [u16; 96] = [
    0xd3e, 0xc80, 0xbcc, 0xb22, 0xa82, 0x9ec, 0x95c, 0x8d6, 0x858, 0x7e0, 0x76e, 0x704, 0x69f,
    0x640, 0x5e6, 0x591, 0x541, 0x4f6, 0x4ae, 0x46b, 0x42c, 0x3f0, 0x3b7, 0x382, 0x34f, 0x320,
    0x2f3, 0x2c8, 0x2a1, 0x27b, 0x257, 0x236, 0x216, 0x1f8, 0x1dc, 0x1c1, 0x1a8, 0x190, 0x179,
    0x164, 0x150, 0x13d, 0x12c, 0x11b, 0x10b, 0x0fc, 0x0ee, 0x0e0, 0x0d4, 0x0c8, 0x0bd, 0x0b2,
    0x0a8, 0x09f, 0x096, 0x08d, 0x085, 0x07e, 0x077, 0x070, 0x06a, 0x064, 0x05e, 0x059, 0x054,
    0x050, 0x04b, 0x047, 0x043, 0x03f, 0x03c, 0x038, 0x035, 0x032, 0x02f, 0x02d, 0x02a, 0x028,
    0x026, 0x024, 0x022, 0x020, 0x01e, 0x01d, 0x01b, 0x01a, 0x019, 0x018, 0x015, 0x014, 0x013,
    0x012, 0x011, 0x010, 0x00f, 0x00e,
];

/// Table #2 of Pro Tracker 3.4x - 3.5x
const PT3_NOTE_TABLE_ASM_34_35: [u16; 96] = [
    0xd10, 0xc55, 0xba4, 0xafc, 0xa5f, 0x9ca, 0x93d, 0x8b8, 0x83b, 0x7c5, 0x755, 0x6ec, 0x688,
    0x62a, 0x5d2, 0x57e, 0x52f, 0x4e5, 0x49e, 0x45c, 0x41d, 0x3e2, 0x3ab, 0x376, 0x344, 0x315,
    0x2e9, 0x2bf, 0x298, 0x272, 0x24f, 0x22e, 0x20f, 0x1f1, 0x1d5, 0x1bb, 0x1a2, 0x18b, 0x174,
    0x160, 0x14c, 0x139, 0x128, 0x117, 0x107, 0x0f9, 0x0eb, 0x0dd, 0x0d1, 0x0c5, 0x0ba, 0x0b0,
    0x0a6, 0x09d, 0x094, 0x08c, 0x084, 0x07c, 0x075, 0x06f, 0x069, 0x063, 0x05d, 0x058, 0x053,
    0x04e, 0x04a, 0x046, 0x042, 0x03e, 0x03b, 0x037, 0x034, 0x031, 0x02f, 0x02c, 0x029, 0x027,
    0x025, 0x023, 0x021, 0x01f, 0x01d, 0x01c, 0x01a, 0x019, 0x017, 0x016, 0x015, 0x014, 0x012,
    0x011, 0x010, 0x00f, 0x00e, 0x00d,
];

/// Table #3 of Pro Tracker 3.4r
const PT3_NOTE_TABLE_REAL_34R: [u16; 96] = [
    0xcda, 0xc22, 0xb73, 0xacf, 0xa33, 0x9a1, 0x917, 0x894, 0x819, 0x7a4, 0x737, 0x6cf, 0x66d,
    0x611, 0x5ba, 0x567, 0x51a, 0x4d0, 0x48b, 0x44a, 0x40c, 0x3d2, 0x39b, 0x367, 0x337, 0x308,
    0x2dd, 0x2b4, 0x28d, 0x268, 0x246, 0x225, 0x206, 0x1e9, 0x1ce, 0x1b4, 0x19b, 0x184, 0x16e,
    0x15a, 0x146, 0x134, 0x123, 0x113, 0x103, 0x0f5, 0x0e7, 0x0da, 0x0ce, 0x0c2, 0x0b7, 0x0ad,
    0x0a3, 0x09a, 0x091, 0x089, 0x082, 0x07a, 0x073, 0x06d, 0x067, 0x061, 0x05c, 0x056, 0x052,
    0x04d, 0x049, 0x045, 0x041, 0x03d, 0x03a, 0x036, 0x033, 0x031, 0x02e, 0x02b, 0x029, 0x027,
    0x024, 0x022, 0x020, 0x01f, 0x01d, 0x01b, 0x01a, 0x018, 0x017, 0x016, 0x014, 0x013, 0x012,
    0x011, 0x010, 0x00f, 0x00e, 0x00d,
];

/// Table #3 of Pro Tracker 3.4x - 3.5x
const PT3_NOTE_TABLE_REAL_34_35: [u16; 96] = [
    0xcda, 0xc22, 0xb73, 0xacf, 0xa33, 0x9a1, 0x917, 0x894, 0x819, 0x7a4, 0x737, 0x6cf, 0x66d,
    0x611, 0x5ba, 0x567, 0x51a, 0x4d0, 0x48b, 0x44a, 0x40c, 0x3d2, 0x39b, 0x367, 0x337, 0x308,
    0x2dd, 0x2b4, 0x28d, 0x268, 0x246, 0x225, 0x206, 0x1e9, 0x1ce, 0x1b4, 0x19b, 0x184, 0x16e,
    0x15a, 0x146, 0x134, 0x123, 0x112, 0x103, 0x0f5, 0x0e7, 0x0da, 0x0ce, 0x0c2, 0x0b7, 0x0ad,
    0x0a3, 0x09a, 0x091, 0x089, 0x082, 0x07a, 0x073, 0x06d, 0x067, 0x061, 0x05c, 0x056, 0x052,
    0x04d, 0x049, 0x045, 0x041, 0x03d, 0x03a, 0x036, 0x033, 0x031, 0x02e, 0x02b, 0x029, 0x027,
    0x024, 0x022, 0x020, 0x01f, 0x01d, 0x01b, 0x01a, 0x018, 0x017, 0x016, 0x014, 0x013, 0x012,
    0x011, 0x010, 0x00f, 0x00e, 0x00d,
];
